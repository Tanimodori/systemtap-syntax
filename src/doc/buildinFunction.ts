export default ['function::addr — Address of the current probe point. ',
'function::asmlinkage — Mark function as declared asmlinkage ',
'function::backtrace — Hex backtrace of current kernel stack ',
'function::caller — Return name and address of calling function ',
'function::caller_addr — Return caller address ',
'function::callers — Return first n elements of kernel stack backtrace ',
'function::cmdline_arg — Fetch a command line argument ',
'function::cmdline_args — Fetch command line arguments from current process ',
'function::cmdline_str — Fetch all command line arguments from current process ',
'function::cpu — Returns the current cpu number ',
'function::cpuid — Returns the current cpu number ',
'function::current_exe_file — get the file struct pointer for the current task\'s executable file ',
'function::egid — Returns the effective gid of a target process ',
'function::env_var — Fetch environment variable from current process ',
'function::euid — Return the effective uid of a target process ',
'function::execname — Returns the execname of a target process (or group of processes) ',
'function::fastcall — Mark function as declared fastcall ',
'function::gid — Returns the group ID of a target process ',
'function::int_arg — Return function argument as signed int ',
'function::is_myproc — Determines if the current probe point has occurred in the user\'s own process ',
'function::is_return — Whether the current probe context is a return probe ',
'function::long_arg — Return function argument as signed long ',
'function::longlong_arg — Return function argument as 64-bit value ',
'function::modname — Return the kernel module name loaded at the address ',
'function::module_name — The module name of the current script ',
'function::module_size — The module size of the current script ',
'function::ns_egid — Returns the effective gid of a target process as seen in a user namespace ',
'function::ns_euid — Returns the effective user ID of a target process as seen in a user namespace ',
'function::ns_gid — Returns the group ID of a target process as seen in a user namespace ',
'function::ns_pgrp — Returns the process group ID of the current process as seen in a pid namespace ',
'function::ns_pid — Returns the ID of a target process as seen in a pid namespace ',
'function::ns_ppid — Returns the process ID of a target process\'s parent process as seen in a pid namespace ',
'function::ns_sid — Returns the session ID of the current process as seen in a pid namespace ',
'function::ns_tid — Returns the thread ID of a target process as seen in a pid namespace ',
'function::ns_uid — Returns the user ID of a target process as seen in a user namespace ',
'function::pexecname — Returns the execname of a target process\'s parent process ',
'function::pgrp — Returns the process group ID of the current process ',
'function::pid — Returns the ID of a target process ',
'function::pid2execname — The name of the given process identifier ',
'function::pid2task — The task_struct of the given process identifier ',
'function::pn — Returns the active probe name ',
'function::pnlabel — Returns the label name parsed from the probe name ',
'function::pointer_arg — Return function argument as pointer value ',
'function::pp — Returns the active probe point ',
'function::ppfunc — Returns the function name parsed from pp ',
'function::ppid — Returns the process ID of a target process\'s parent process ',
'function::print_backtrace — Print kernel stack back trace ',
'function::print_regs — Print a register dump ',
'function::print_stack — Print out kernel stack from string ',
'function::print_syms — Print out kernel stack from string ',
'function::print_ubacktrace — Print stack back trace for current user-space task. ',
'function::print_ubacktrace_brief — Print stack back trace for current user-space task. ',
'function::print_ustack — Print out stack for the current task from string. ',
'function::print_usyms — Print out user stack from string ',
'function::probe_type — The low level probe handler type of the current probe. ',
'function::probefunc — Return the probe point\'s function name, if known ',
'function::probemod — Return the probe point\'s kernel module name ',
'function::pstrace — Chain of processes and pids back to init(1) ',
'function::register — Return the signed value of the named CPU register ',
'function::registers_valid — Determines validity of register and u_register in current context ',
'function::regparm — Specify regparm value used to compile function ',
'function::remote_id — The index of this instance in a remote execution. ',
'function::remote_uri — The name of this instance in a remote execution. ',
'function::s32_arg — Return function argument as signed 32-bit value ',
'function::s64_arg — Return function argument as signed 64-bit value ',
'function::sid — Returns the session ID of the current process ',
'function::sprint_backtrace — Return stack back trace as string ',
'function::sprint_stack — Return stack for kernel addresses from string ',
'function::sprint_syms — Return stack for kernel addresses from string ',
'function::sprint_ubacktrace — Return stack back trace for current user-space task as string. ',
'function::sprint_ustack — Return stack for the current task from string. ',
'function::sprint_usyms — Return stack for user addresses from string ',
'function::stack — Return address at given depth of kernel stack backtrace ',
'function::stack_size — Return the size of the kernel stack ',
'function::stack_unused — Returns the amount of kernel stack currently available ',
'function::stack_used — Returns the amount of kernel stack used ',
'function::stp_pid — The process id of the stapio process ',
'function::symdata — Return the kernel symbol and module offset for the address ',
'function::symfile — Return the file name of a given address. ',
'function::symfileline — Return the file name and line number of an address. ',
'function::symline — Return the line number of an address. ',
'function::symname — Return the kernel symbol associated with the given address ',
'function::target — Return the process ID of the target process ',
'function::task_ancestry — The ancestry of the given task ',
'function::task_backtrace — Hex backtrace of an arbitrary task ',
'function::task_cpu — The scheduled cpu of the task ',
'function::task_current — The current task_struct of the current task ',
'function::task_cwd_path — get the path struct pointer for a task\'s current working directory ',
'function::task_egid — The effective group identifier of the task ',
'function::task_euid — The effective user identifier of the task ',
'function::task_exe_file — get the file struct pointer for a task\'s executable file ',
'function::task_execname — The name of the task ',
'function::task_fd_lookup — get the file struct for a task\'s fd ',
'function::task_gid — The group identifier of the task ',
'function::task_max_file_handles — The max number of open files for the task ',
'function::task_nice — The nice value of the task ',
'function::task_ns_egid — The effective group identifier of the task ',
'function::task_ns_euid — The effective user identifier of the task ',
'function::task_ns_gid — The group identifier of the task as seen in a namespace ',
'function::task_ns_pid — The process identifier of the task ',
'function::task_ns_tid — The thread identifier of the task as seen in a namespace ',
'function::task_ns_uid — The user identifier of the task ',
'function::task_open_file_handles — The number of open files of the task ',
'function::task_parent — The task_struct of the parent task ',
'function::task_pid — The process identifier of the task ',
'function::task_prio — The priority value of the task ',
'function::task_state — The state of the task ',
'function::task_tid — The thread identifier of the task ',
'function::task_uid — The user identifier of the task ',
'function::tid — Returns the thread ID of a target process ',
'function::u32_arg — Return function argument as unsigned 32-bit value ',
'function::u64_arg — Return function argument as unsigned 64-bit value ',
'function::u_register — Return the unsigned value of the named CPU register ',
'function::uaddr — User space address of current running task ',
'function::ubacktrace — Hex backtrace of current user-space task stack. ',
'function::ucallers — Return first n elements of user stack backtrace ',
'function::uid — Returns the user ID of a target process ',
'function::uint_arg — Return function argument as unsigned int ',
'function::ulong_arg — Return function argument as unsigned long ',
'function::ulonglong_arg — Return function argument as 64-bit value ',
'function::umodname — Returns the (short) name of the user module. ',
'function::user_mode — Determines if probe point occurs in user-mode ',
'function::ustack — Return address at given depth of user stack backtrace ',
'function::usymdata — Return the symbol and module offset of an address. ',
'function::usymfile — Return the file name of a given address. ',
'function::usymfileline — Return the file name and line number of an address. ',
'function::usymline — Return the line number of an address. ',
'function::usymname — Return the symbol of an address in the current task. ',
'function::HZ — Kernel HZ ',
'function::cpu_clock_ms — Number of milliseconds on the given cpu\'s clock ',
'function::cpu_clock_ns — Number of nanoseconds on the given cpu\'s clock ',
'function::cpu_clock_s — Number of seconds on the given cpu\'s clock ',
'function::cpu_clock_us — Number of microseconds on the given cpu\'s clock ',
'function::delete_stopwatch — Remove an existing stopwatch ',
'function::get_cycles — Processor cycle count ',
'function::gettimeofday_ms — Number of milliseconds since UNIX epoch ',
'function::gettimeofday_ns — Number of nanoseconds since UNIX epoch ',
'function::gettimeofday_s — Number of seconds since UNIX epoch ',
'function::gettimeofday_us — Number of microseconds since UNIX epoch ',
'function::jiffies — Kernel jiffies count ',
'function::ktime_get_ns — Number of nanoseconds since boot ',
'function::local_clock_ms — Number of milliseconds on the local cpu\'s clock ',
'function::local_clock_ns — Number of nanoseconds on the local cpu\'s clock ',
'function::local_clock_s — Number of seconds on the local cpu\'s clock ',
'function::local_clock_us — Number of microseconds on the local cpu\'s clock ',
'function::read_stopwatch_ms — Reads the time in milliseconds for a stopwatch ',
'function::read_stopwatch_ns — Reads the time in nanoseconds for a stopwatch ',
'function::read_stopwatch_s — Reads the time in seconds for a stopwatch ',
'function::read_stopwatch_us — Reads the time in microseconds for a stopwatch ',
'function::start_stopwatch — Start a stopwatch ',
'function::stop_stopwatch — Stop a stopwatch ',
'function::ctime — Convert seconds since epoch into human readable date/time string ',
'function::tz_ctime — Convert seconds since epoch into human readable date/time string, with local time zone ',
'function::tz_gmtoff — Return local time zone offset ',
'function::tz_name — Return local time zone name ',
'function::system — Issue a command to the system ',
'function::addr_to_node — Returns which node a given address belongs to within a NUMA system ',
'function::bytes_to_string — Human readable string for given bytes ',
'function::mem_page_size — Number of bytes in a page for this architecture ',
'function::pages_to_string — Turns pages into a human readable string ',
'function::proc_mem_data — Program data size (data + stack) in pages ',
'function::proc_mem_rss — Program resident set size in pages ',
'function::proc_mem_shr — Program shared pages (from shared mappings) ',
'function::proc_mem_size — Total program virtual memory size in pages ',
'function::proc_mem_string — Human readable string of process memory usage ',
'function::proc_mem_txt — Program text (code) size in pages ',
'function::vm_fault_contains — Test return value for page fault reason ',
'function::cputime_to_msecs — Translates the given cputime into milliseconds ',
'function::cputime_to_string — Human readable string for given cputime ',
'function::cputime_to_usecs — Translates the given cputime into microseconds ',
'function::msecs_to_string — Human readable string for given milliseconds ',
'function::nsecs_to_string — Human readable string for given nanoseconds ',
'function::task_start_time — Start time of the given task ',
'function::task_stime — System time of the task ',
'function::task_time_string — Human readable string of task time usage ',
'function::task_time_string_tid — Human readable string of task time usage ',
'function::task_utime — User time of the task ',
'function::usecs_to_string — Human readable string for given microseconds ',
'function::format_ipaddr — Returns a string representation for an IP address ',
'function::htonl — Convert 32-bit long from host to network order ',
'function::htonll — Convert 64-bit long long from host to network order ',
'function::htons — Convert 16-bit short from host to network order ',
'function::ip_ntop — Returns a string representation for an IPv4 address ',
'function::ntohl — Convert 32-bit long from network to host order ',
'function::ntohll — Convert 64-bit long long from network to host order ',
'function::ntohs — Convert 16-bit short from network to host order ',
'function::inet_get_ip_source — Provide IP source address string for a kernel socket ',
'function::inet_get_local_port — Provide local port number for a kernel socket ',
'function::sock_fam_num2str — Given a protocol family number, return a string representation ',
'function::sock_fam_str2num — Given a protocol family name (string), return the corresponding protocol family number ',
'function::sock_prot_num2str — Given a protocol number, return a string representation ',
'function::sock_prot_str2num — Given a protocol name (string), return the corresponding protocol number ',
'function::sock_state_num2str — Given a socket state number, return a string representation ',
'function::sock_state_str2num — Given a socket state string, return the corresponding state number ',
'function::ipmib_filter_key — Default filter function for ipmib.* probes ',
'function::ipmib_get_proto — Get the protocol value ',
'function::ipmib_local_addr — Get the local ip address ',
'function::ipmib_remote_addr — Get the remote ip address ',
'function::ipmib_tcp_local_port — Get the local tcp port ',
'function::ipmib_tcp_remote_port — Get the remote tcp port ',
'function::linuxmib_filter_key — Default filter function for linuxmib.* probes ',
'function::tcpmib_filter_key — Default filter function for tcpmib.* probes ',
'function::tcpmib_get_state — Get a socket\'s state ',
'function::tcpmib_local_addr — Get the source address ',
'function::tcpmib_local_port — Get the local port ',
'function::tcpmib_remote_addr — Get the remote address ',
'function::tcpmib_remote_port — Get the remote port ',
'function::get_loadavg_index — Get the load average for a specified interval ',
'function::sprint_loadavg — Report a pretty-printed load average ',
'function::target_set_pid — Does pid descend from target process? ',
'function::target_set_report — Print a report about the target set ',
'function::get_sa_flags — Returns the numeric value of sa_flags ',
'function::get_sa_handler — Returns the numeric value of sa_handler ',
'function::is_sig_blocked — Returns 1 if the signal is currently blocked, or 0 if it is not ',
'function::sa_flags_str — Returns the string representation of sa_flags ',
'function::sa_handler_str — Returns the string representation of an sa_handler ',
'function::signal_str — Returns the string representation of a signal number ',
'function::sigset_mask_str — Returns the string representation of a sigset ',
'function::errno_str — Symbolic string associated with error code ',
'function::return_str — Formats the return value as a string ',
'function::returnstr — Formats the return value as a string ',
'function::returnval — Possible return value of probed function ',
'function::rlimit_from_str — Symbolic string associated with resource limit code ',
'function::MAJOR — Extract major device number from a kernel device number (kdev_t) ',
'function::MINOR — Extract minor device number from a kernel device number (kdev_t) ',
'function::MKDEV — Creates a value that can be compared to a kernel device number (kdev_t) ',
'function::usrdev2kerndev — Converts a user-space device number into the format used in the kernel ',
'function::d_name — get the dirent name ',
'function::d_path — get the full nameidata path ',
'function::fullpath_struct_file — get the full path ',
'function::fullpath_struct_nameidata — get the full nameidata path ',
'function::fullpath_struct_path — get the full path ',
'function::inode_name — get the inode name ',
'function::inode_path — get the path to an inode ',
'function::real_mount — get the \'struct mount\' pointer ',
'function::reverse_path_walk — get the full dirent path ',
'function::task_dentry_path — get the full dentry path ',
'function::abort — Immediately shutting down probing script. ',
'function::assert — evaluate assertion ',
'function::error — Send an error message ',
'function::exit — Start shutting down probing script. ',
'function::ftrace — Send a message to the ftrace ring-buffer ',
'function::log — Send a line to the common trace buffer ',
'function::printk — Send a message to the kernel trace buffer ',
'function::warn — Send a line to the warning stream ',
'function::qs_done — Function to record finishing request ',
'function::qs_run — Function to record being moved from wait queue to being serviced ',
'function::qs_wait — Function to record enqueue requests ',
'function::qsq_blocked — Returns the time reqest was on the wait queue ',
'function::qsq_print — Prints a line of statistics for the given queue ',
'function::qsq_service_time — Amount of time per request service ',
'function::qsq_start — Function to reset the stats for a queue ',
'function::qsq_throughput — Number of requests served per unit time ',
'function::qsq_utilization — Fraction of time that any request was being serviced ',
'function::qsq_wait_queue_length — length of wait queue ',
'function::qsq_wait_time — Amount of time in queue + service per request ',
'function::randint — Return a random number between [0,n) ',
'function::atomic_long_read — Retrieves an atomic long variable from kernel memory ',
'function::atomic_read — Retrieves an atomic variable from kernel memory ',
'function::kernel_buffer_quoted — Retrieves and quotes buffer from kernel space ',
'function::kernel_buffer_quoted_error — Retrieves and quotes buffer from kernel space ',
'function::kernel_char — Retrieves a char value stored in kernel memory ',
'function::kernel_int — Retrieves an int value stored in kernel memory ',
'function::kernel_long — Retrieves a long value stored in kernel memory ',
'function::kernel_pointer — Retrieves a pointer value stored in kernel memory ',
'function::kernel_short — Retrieves a short value stored in kernel memory ',
'function::kernel_string — Retrieves string from kernel memory ',
'function::kernel_string_n — Retrieves string of given length from kernel memory ',
'function::kernel_string_quoted — Retrieves and quotes string from kernel memory ',
'function::kernel_string_quoted_utf16 — Quote given kernel UTF-16 string. ',
'function::kernel_string_quoted_utf32 — Quote given UTF-32 kernel string. ',
'function::kernel_string_utf16 — Retrieves UTF-16 string from kernel memory ',
'function::kernel_string_utf32 — Retrieves UTF-32 string from kernel memory ',
'function::user_buffer_quoted — Retrieves and quotes buffer from user space ',
'function::user_buffer_quoted_error — Retrieves and quotes buffer from user space ',
'function::user_char — Retrieves a char value stored in user space ',
'function::user_char_error — Retrieves a char value stored in user space ',
'function::user_char_warn — Retrieves a char value stored in user space ',
'function::user_int — Retrieves an int value stored in user space ',
'function::user_int16 — Retrieves a 16-bit integer value stored in user space ',
'function::user_int16_error — Retrieves a 16-bit integer value stored in user space ',
'function::user_int32 — Retrieves a 32-bit integer value stored in user space ',
'function::user_int32_error — Retrieves a 32-bit integer value stored in user space ',
'function::user_int64 — Retrieves a 64-bit integer value stored in user space ',
'function::user_int64_error — Retrieves a 64-bit integer value stored in user space ',
'function::user_int8 — Retrieves a 8-bit integer value stored in user space ',
'function::user_int8_error — Retrieves a 8-bit integer value stored in user space ',
'function::user_int_error — Retrieves an int value stored in user space ',
'function::user_int_warn — Retrieves an int value stored in user space ',
'function::user_long — Retrieves a long value stored in user space ',
'function::user_long_error — Retrieves a long value stored in user space ',
'function::user_long_warn — Retrieves a long value stored in user space ',
'function::user_short — Retrieves a short value stored in user space ',
'function::user_short_error — Retrieves a short value stored in user space ',
'function::user_short_warn — Retrieves a short value stored in user space ',
'function::user_string — Retrieves string from user space ',
'function::user_string_n — Retrieves string of given length from user space ',
'function::user_string_n_quoted — Retrieves and quotes string from user space ',
'function::user_string_n_warn — Retrieves string from user space ',
'function::user_string_quoted — Retrieves and quotes string from user space ',
'function::user_string_quoted_utf16 — Quote given user UTF-16 string. ',
'function::user_string_quoted_utf32 — Quote given user UTF-32 string. ',
'function::user_string_utf16 — Retrieves UTF-16 string from user memory ',
'function::user_string_utf32 — Retrieves UTF-32 string from user memory ',
'function::user_string_warn — Retrieves string from user space ',
'function::user_uint16 — Retrieves an unsigned 16-bit integer value stored in user space ',
'function::user_uint16_error — Retrieves an unsigned 16-bit integer value stored in user space ',
'function::user_uint32 — Retrieves an unsigned 32-bit integer value stored in user space ',
'function::user_uint32_error — Retrieves an unsigned 32-bit integer value stored in user space ',
'function::user_uint64 — Retrieves an unsigned 64-bit integer value stored in user space ',
'function::user_uint64_error — Retrieves an unsigned 64-bit integer value stored in user space ',
'function::user_uint8 — Retrieves a unsigned 8-bit integer value stored in user space ',
'function::user_uint8_error — Retrieves a unsigned 8-bit integer value stored in user space ',
'function::user_ulong — Retrieves an unsigned long value stored in user space ',
'function::user_ulong_error — Retrieves a unsigned long value stored in user space ',
'function::user_ulong_warn — Retrieves an unsigned long value stored in user space ',
'function::user_ushort — Retrieves an unsigned short value stored in user space ',
'function::user_ushort_error — Retrieves an unsigned short value stored in user space ',
'function::user_ushort_warn — Retrieves an unsigned short value stored in user space ',
'function::set_kernel_char — Writes a char value to kernel memory ',
'function::set_kernel_int — Writes an int value to kernel memory ',
'function::set_kernel_long — Writes a long value to kernel memory ',
'function::set_kernel_pointer — Writes a pointer value to kernel memory. ',
'function::set_kernel_short — Writes a short value to kernel memory ',
'function::set_kernel_string — Writes a string to kernel memory ',
'function::set_kernel_string_n — Writes a string of given length to kernel memory ',
'function::set_user_char — Writes a char value to user memory ',
'function::set_user_int — Writes an int value to user memory ',
'function::set_user_long — Writes a long value to user memory ',
'function::set_user_pointer — Writes a pointer value to user memory. ',
'function::set_user_short — Writes a short value to user memory ',
'function::set_user_string — Writes a string to user memory ',
'function::set_user_string_n — Writes a string of given length to user memory ',
'function::mdelay — millisecond delay ',
'function::panic — trigger a panic ',
'function::raise — raise a signal in the current thread ',
'function::udelay — microsecond delay ',
'function::isdigit — Checks for a digit ',
'function::isinstr — Returns whether a string is a substring of another string ',
'function::matched — Return a given matched subexpression. ',
'function::matched_str — Return the last matched string. ',
'function::ngroups — Number of subexpressions in the last match. ',
'function::str_replace — str_replace Replaces all instances of a substring with another ',
'function::string_quoted — Quotes a given string ',
'function::stringat — Returns the char at a given position in the string ',
'function::strlen — Returns the length of a string ',
'function::strpos — Returns location of a substring within another string ',
'function::strtol — strtol - Convert a string to a long ',
'function::substr — Returns a substring ',
'function::text_str — Escape any non-printable chars in a string ',
'function::text_strn — Escape any non-printable chars in a string ',
'function::tokenize — Return the next non-empty token in a string ',
'function::ansi_clear_screen — Move cursor to top left and clear screen. ',
'function::ansi_cursor_hide — Hides the cursor. ',
'function::ansi_cursor_move — Move cursor to new coordinates. ',
'function::ansi_cursor_restore — Restores a previously saved cursor position. ',
'function::ansi_cursor_save — Saves the cursor position. ',
'function::ansi_cursor_show — Shows the cursor. ',
'function::ansi_new_line — Move cursor to new line. ',
'function::ansi_reset_color — Resets Select Graphic Rendition mode. ',
'function::ansi_set_color — Set the ansi Select Graphic Rendition mode. ',
'function::indent — returns an amount of space to indent ',
'function::indent_depth — returns the global nested-depth ',
'function::thread_indent — returns an amount of space with the current task information ',
'function::thread_indent_depth — returns the nested-depth of the current task ',
'function::nfsderror — Convert nfsd error number into string ',
'function::commit — Write out all output related to a speculation buffer ',
'function::discard — Discard all output related to a speculation buffer ',
'function::speculate — Store a string for possible output later ',
'function::speculation — Allocate a new id for speculative output ',
'function::json_add_array — Add an array ',
'function::json_add_array_numeric_metric — Add a numeric metric to an array ',
'function::json_add_array_string_metric — Add a string metric to an array ',
'function::json_add_numeric_metric — Add a numeric metric ',
'function::json_add_string_metric — Add a string metric ',
'function::json_set_prefix — Set the metric prefix. ',
'function::switch_file — switch to the next output file '];
